{"id":"src/scenes/PlayScene.js","dependencies":[{"name":"../CST","loc":{"line":1,"column":20},"parent":"C:\\Users\\mosflash12\\Desktop\\GroupWebsite\\SpaceShooterDev\\WebsiteV1\\src\\scenes\\PlayScene.js","resolved":"C:\\Users\\mosflash12\\Desktop\\GroupWebsite\\SpaceShooterDev\\WebsiteV1\\src\\CST.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PlayScene = void 0;\n\nvar _CST = require(\"../CST\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar PlayScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(PlayScene, _Phaser$Scene);\n\n  function PlayScene() {\n    _classCallCheck(this, PlayScene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlayScene).call(this, {\n      key: _CST.CST.SCENES.PLAY\n    }));\n  }\n\n  _createClass(PlayScene, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      /*     PlayScene.load.image()\r\n          PlayScene.load.image()\r\n          PlayScene.load.image()\r\n          PlayScene.load.spritesheet() */\n    }\n  }, {\n    key: \"create\",\n    value: function create() {// Gamepad.physics.startSystem(Phaser.Physics.ARCADE)\n      // PlayScene.add.sprite(0,0,'sky')\n\n      /*  platforms = game.add.group()\r\n       platforms.enableBody = true\r\n         let ground = platforms.create(0, game.world.height - 64, 'ground')\r\n       ground.scale.setTo(2,2)\r\n       ground.body.immovable = true\r\n       \r\n       \r\n         player = game.add.sprite(32, game.world.height - 150, 'woof')\r\n       game.physics.arcade.enable(player)\r\n       player.body.bounce.y = 0.2\r\n       player.body.gravity.y = 800\r\n       player.body.collideWorldBounds = true */\n    }\n  }]);\n\n  return PlayScene;\n}(Phaser.Scene);\n\nexports.PlayScene = PlayScene;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":1,"column":0}},{"name":"PlayScene","generated":{"line":28,"column":4},"source":"src/scenes/PlayScene.js","original":{"line":3,"column":13}},{"generated":{"line":33,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":4,"column":4}},{"generated":{"line":33,"column":23},"source":"src/scenes/PlayScene.js","original":{"line":4,"column":17}},{"generated":{"line":34,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":4,"column":17}},{"generated":{"line":36,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":4,"column":17}},{"generated":{"line":36,"column":82},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":14}},{"name":"key","generated":{"line":37,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":15}},{"name":"key","generated":{"line":37,"column":6},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":15}},{"generated":{"line":37,"column":9},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":18}},{"name":"CST","generated":{"line":37,"column":11},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":19}},{"name":"SCENES","generated":{"line":37,"column":20},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":23}},{"generated":{"line":37,"column":26},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":19}},{"name":"PLAY","generated":{"line":37,"column":27},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":30}},{"generated":{"line":38,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":5,"column":14}},{"generated":{"line":38,"column":5},"source":"src/scenes/PlayScene.js","original":{"line":4,"column":17}},{"generated":{"line":39,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":6,"column":5}},{"generated":{"line":43,"column":27},"source":"src/scenes/PlayScene.js","original":{"line":11,"column":10}},{"generated":{"line":43,"column":28},"source":"src/scenes/PlayScene.js","original":{"line":11,"column":12}},{"generated":{"line":46,"column":30},"source":"src/scenes/PlayScene.js","original":{"line":13,"column":13}},{"generated":{"line":47,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":14,"column":4}},{"generated":{"line":51,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":19,"column":5}},{"generated":{"line":54,"column":29},"source":"src/scenes/PlayScene.js","original":{"line":20,"column":12}},{"generated":{"line":54,"column":30},"source":"src/scenes/PlayScene.js","original":{"line":21,"column":8}},{"generated":{"line":55,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":23,"column":8}},{"generated":{"line":57,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":25,"column":7}},{"generated":{"line":69,"column":0},"source":"src/scenes/PlayScene.js","original":{"line":39,"column":5}},{"name":"Phaser","generated":{"line":73,"column":2},"source":"src/scenes/PlayScene.js","original":{"line":3,"column":31}},{"generated":{"line":73,"column":8},"source":"src/scenes/PlayScene.js","original":{"line":3,"column":37}},{"name":"Scene","generated":{"line":73,"column":9},"source":"src/scenes/PlayScene.js","original":{"line":3,"column":38}}],"sources":{"src/scenes/PlayScene.js":"import { CST } from \"../CST\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n    constructor(){\r\n        super({key:CST.SCENES.PLAY});\r\n    }\r\n\r\n    \r\n    \r\n\r\n    init(){}\r\n\r\n    preload(){\r\n    /*     PlayScene.load.image()\r\n        PlayScene.load.image()\r\n        PlayScene.load.image()\r\n        PlayScene.load.spritesheet() */\r\n        \r\n    }\r\n    create(){\r\n        // Gamepad.physics.startSystem(Phaser.Physics.ARCADE)\r\n\r\n        // PlayScene.add.sprite(0,0,'sky')\r\n\r\n       /*  platforms = game.add.group()\r\n        platforms.enableBody = true\r\n\r\n        let ground = platforms.create(0, game.world.height - 64, 'ground')\r\n        ground.scale.setTo(2,2)\r\n        ground.body.immovable = true\r\n        \r\n        \r\n\r\n        player = game.add.sprite(32, game.world.height - 150, 'woof')\r\n        game.physics.arcade.enable(player)\r\n        player.body.bounce.y = 0.2\r\n        player.body.gravity.y = 800\r\n        player.body.collideWorldBounds = true */\r\n    }\r\n\r\n}\r\n\r\n"},"lineCount":null}},"error":null,"hash":"3acb383fd0a4464617105807c67eae9c","cacheData":{"env":{}}}